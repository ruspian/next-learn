// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// model room
model Room {
  id            String          @id @default(cuid())
  name          String
  description   String          @db.Text
  price         Int
  capacity      Int             @default(1)
  image         String
  RoomAmenities     RoomAmenities[]
  Reservation   Reservation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Amenities
model Amenities {
  id            String          @id @default(cuid())
  name          String
  RoomAmenities RoomAmenities[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model RoomAmenities
model RoomAmenities {
  id            String          @id @default(cuid())
  roomId        String
  amenitiesId   String
  Room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  Amenities Amenities @relation(fields: [amenitiesId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model reservation
model Reservation {
  id            String          @id @default(cuid())
  roomId        String
  userId        String
  startDate     DateTime
  endDate       DateTime
  price         Int
  Room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Payment Payment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model payment
model Payment {
  id            String          @id @default(cuid())
  method        String?
  amount        Int
  status        String @default("unpaid")
  reservationId String @unique
  Reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model user
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  role          String?         @default("user")
  phone         String?
  Reservation   Reservation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
// model account
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
